#include <vector>
#include <iostream>

std::vector<float> get_image();

__global__
void blur_image_kernel(float* input,
                       float* output,
                       size_t nrows,
                       size_t ncols) {
  // x gives row
  // y gives col
  const size_t idx_x = blockDim.x * blockIdx.x + threadIdx.x;
  const size_t idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  // printf("blur_image_kernel %lu %lu\n", idx_x, idx_y);
  if (idx_x >= nrows or idx_y >= ncols) {
    return;
  }
  const auto idx = idx_x * ncols + idx_y;
  const size_t span_height{1};
  const size_t span_width{1};
  float sum{0.0f};
  float pixels{0.0f};

  const int idx_l = idx_x - span_height;
  const int idx_r = idx_x + span_height + 1;
  const int idx_u = idx_y - span_width;
  const int idx_d = idx_y + span_width + 1;

  for (int row_ = idx_l; row_ < idx_r; ++row_) {
    if (row_ < 0 or row_ >= nrows) {
      continue;
    }
    for (int col_ = idx_u; col_ < idx_d; ++col_) {
      if (col_ < 0 or col_ >= ncols) {
        continue;
      }
      const auto idx_ = row_ * ncols + col_;
      sum += input[idx_];
      ++pixels;
    }
  }
  output[idx] = sum / pixels;
}

std::vector<float> blur_image(float* image_h,
                              const size_t nrows,
                              const size_t ncols) {
  const size_t ntotal{nrows * ncols};
  const size_t size{ntotal * sizeof(float)};

  // set up device
  float* image_orig_d;
  float* image_blur_d;
  cudaMalloc(&image_orig_d, size);
  cudaMalloc(&image_blur_d, size);
  const cudaError_t err_orig = cudaMemcpy(image_orig_d,
                                          image_h,
                                          size,
                                          cudaMemcpyHostToDevice);
  if (err_orig != cudaSuccess) {
    const auto msg = cudaGetErrorString(err_orig);
    throw std::runtime_error(msg);
  }

  // set up threads
  if (nrows == 0 or ncols == 0) {
    throw std::runtime_error("I cant work with this");
  }
  const size_t nthreads_x{8};
  const size_t nthreads_y{4};
  const size_t nthreads_z{1};
  const size_t nblocks_x{(nrows - 1) / nthreads_x + 1};
  const size_t nblocks_y{(ncols - 1) / nthreads_y + 1};
  const size_t nblocks_z{1};
  printf("nrows=%i ncols=%i -> nthreads_x=%i nthreads_y=%i nblocks_x=%i nblocks_x=%i\n",
         nrows, ncols, nthreads_x, nthreads_y, nblocks_x, nblocks_y);
  const dim3 nthreads(nthreads_x, nthreads_y, nthreads_z);
  const dim3 nblocks(nblocks_x, nblocks_y, nblocks_z);

  // do it
  blur_image_kernel<<<nblocks, nthreads>>>(image_orig_d,
                                           image_blur_d,
                                           nrows,
                                           ncols);

  // copy to host
  // cudaDeviceSynchronize();
  auto image_blur_h = std::vector<float>(ntotal);
  const cudaError_t err_blur = cudaMemcpy(image_blur_h.data(),
                                          image_blur_d,
                                          size,
                                          cudaMemcpyDeviceToHost);

  return image_blur_h;
}

void ascii_image(const std::vector<float>& img,
                 const size_t nrows,
                 const size_t ncols) {
  if (img.size() != nrows*ncols) {
    throw std::runtime_error("ascii image is upset");
  }
  for (size_t it = 0; it < img.size(); ++it) {
    if (it % ncols == 0) {
      printf("\n");
    }
    printf("%.2f ", img.at(it));
  }
  printf("\n");
}

int main() {
  printf("main\n");
  // initialize image
  // constexpr size_t nrows{3};
  // constexpr size_t ncols{3};
  // std::vector<float> image{ 0, 0, 0,
  //                           0, 1, 0,
  //                           0, 0, 0,
  // };
  constexpr size_t nrows{28};
  constexpr size_t ncols{28};
  auto image = get_image();
  ascii_image(image, nrows, ncols);
  if (nrows * ncols != image.size()) {
    throw std::runtime_error("Something is wrong");
  }

  const auto blurred_image = blur_image(image.data(), nrows, ncols);
  ascii_image(blurred_image, nrows, ncols);

  return 0;
}



std::vector<float> get_image() {
  return {
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0118, 0.6039, 1.0000, 0.9961, 0.8941, 0.1725, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2314, 0.7176, 0.9922, 0.9922, 0.9922, 0.9922, 0.4784, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.6941, 0.3255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0353, 0.5255, 0.9843, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9412, 0.3255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5686, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0392, 0.5490, 0.9765, 0.9922, 0.9922, 0.9922, 0.9176, 0.3216, 0.5333, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1961, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.6039, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.8196, 0.9922, 0.9922, 0.9922, 0.9059, 0.2980, 0.0588, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4863, 0.9922, 0.9922, 0.9922, 0.9922, 0.6706, 0.0000, 0.0000, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.9765, 0.9922, 0.9922, 0.9922, 0.7922, 0.0353, 0.0000, 0.0000, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.9922, 0.9922, 0.9922, 0.8157, 0.1216, 0.0000, 0.0000, 0.0000, 0.0039, 0.4706, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3843, 0.9922, 0.9922, 0.9922, 0.7333, 0.0000, 0.0000, 0.0000, 0.0000, 0.3490, 0.9922, 0.9922, 0.9922, 0.9020, 0.2549, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0431, 0.7922, 0.9922, 0.9922, 0.9922, 0.6706, 0.0000, 0.0000, 0.0000, 0.2902, 0.9294, 0.9922, 0.9922, 0.9922, 0.7020, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.0941, 0.0000, 0.0000, 0.0157, 0.6627, 0.9922, 0.9922, 0.9922, 0.9922, 0.1255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.0941, 0.0000, 0.0549, 0.1922, 0.9922, 0.9922, 0.9922, 0.9922, 0.5725, 0.0235, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.5569, 0.5137, 0.6706, 0.9922, 0.9922, 0.9922, 0.9922, 0.9059, 0.2314, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0549, 0.8000, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.8902, 0.2275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.7725, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9333, 0.2275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.8431, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.8784, 0.2196, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1725, 0.3490, 0.7020, 0.9922, 0.9922, 0.3686, 0.3490, 0.2157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
  };
}
