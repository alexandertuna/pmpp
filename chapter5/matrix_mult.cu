#include <vector>
#include <iostream>

std::vector<float> get_image();

__global__
void square_matrix_kernel(float* in, float* out, size_t nrows, size_t ncols) {
  const size_t idx{blockIdx.x * blockDim.x + threadIdx.x};
  const size_t row{idx / ncols};
  const size_t col{idx % ncols};
  // printf("idx=%lu\n", idx);
  if (idx < nrows * ncols) {
    printf("idx=%lu => row=%lu, col=%lu\n", idx, row, col);
    // element row i, col j => idx = row_i*ncols + col_j
    // idx idx => row = idx / ncols, col = idx % ncols
    // row i, col j -> left-row-i dot right-col-j
    float dotproduct{0};
    for (size_t it{0}; it < ncols; ++it) {
      // left-row-i-element-it * right-col-j-element-it
      const size_t idx_l = row*ncols + it;
      const size_t idx_r = it*ncols + col;
      dotproduct += (in[idx_l] * in[idx_r]);
    }
    out[idx] = dotproduct;
  }
}

std::vector<float> square_matrix(const std::vector<float>& array_h, size_t nrows, size_t ncols) {
  float* array_d;
  float* arraysq_d;
  const size_t size = array_h.size();
  const size_t bytes = size * sizeof(float);
  auto arraysq_h = std::vector<float>(size);

  const auto err_d = cudaMalloc(&array_d, bytes);
  const auto err_sq_d = cudaMalloc(&arraysq_d, bytes);
  const auto err_h2d = cudaMemcpy(array_d, array_h.data(), bytes, cudaMemcpyHostToDevice);

  const size_t nblocks{8};
  const size_t nthreads{128};
  square_matrix_kernel<<<nblocks, nthreads>>>(array_d, arraysq_d, nrows, ncols);

  const auto err_d2h = cudaMemcpy(arraysq_h.data(), arraysq_d, bytes, cudaMemcpyDeviceToHost);
  return arraysq_h;
}

void ascii_image(const std::vector<float>& img,
                 const size_t nrows,
                 const size_t ncols) {
  if (img.size() != nrows*ncols) {
    throw std::runtime_error("ascii image is upset");
  }
  for (size_t it = 0; it < img.size(); ++it) {
    if (it % ncols == 0) {
      printf("\n");
    }
    printf("%.2f ", img.at(it));
  }
  printf("\n");
}

int main() {
  // const size_t nrows{2};
  // const size_t ncols{2};
  // const std::vector<float> array{1, 2, 3, 4};

  const size_t nrows{28};
  const size_t ncols{28};
  const std::vector<float> array{get_image()};

  ascii_image(array, nrows, ncols);
  const auto sq = square_matrix(array, nrows, ncols);
  ascii_image(sq, nrows, ncols);
  return 0;
}


std::vector<float> get_image() {
  return {
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0118, 0.6039, 1.0000, 0.9961, 0.8941, 0.1725, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2314, 0.7176, 0.9922, 0.9922, 0.9922, 0.9922, 0.4784, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.6941, 0.3255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0353, 0.5255, 0.9843, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9412, 0.3255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.5686, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0392, 0.5490, 0.9765, 0.9922, 0.9922, 0.9922, 0.9176, 0.3216, 0.5333, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1961, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.6039, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.8196, 0.9922, 0.9922, 0.9922, 0.9059, 0.2980, 0.0588, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4863, 0.9922, 0.9922, 0.9922, 0.9922, 0.6706, 0.0000, 0.0000, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.9765, 0.9922, 0.9922, 0.9922, 0.7922, 0.0353, 0.0000, 0.0000, 0.0000, 0.4549, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.9922, 0.9922, 0.9922, 0.8157, 0.1216, 0.0000, 0.0000, 0.0000, 0.0039, 0.4706, 0.9922, 0.9922, 0.9922, 0.4157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3843, 0.9922, 0.9922, 0.9922, 0.7333, 0.0000, 0.0000, 0.0000, 0.0000, 0.3490, 0.9922, 0.9922, 0.9922, 0.9020, 0.2549, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0431, 0.7922, 0.9922, 0.9922, 0.9922, 0.6706, 0.0000, 0.0000, 0.0000, 0.2902, 0.9294, 0.9922, 0.9922, 0.9922, 0.7020, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.0941, 0.0000, 0.0000, 0.0157, 0.6627, 0.9922, 0.9922, 0.9922, 0.9922, 0.1255, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.0941, 0.0000, 0.0549, 0.1922, 0.9922, 0.9922, 0.9922, 0.9922, 0.5725, 0.0235, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.4196, 0.9922, 0.9922, 0.9922, 0.9922, 0.5569, 0.5137, 0.6706, 0.9922, 0.9922, 0.9922, 0.9922, 0.9059, 0.2314, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0549, 0.8000, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.8902, 0.2275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.7725, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9333, 0.2275, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1294, 0.8431, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.9922, 0.8784, 0.2196, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1725, 0.3490, 0.7020, 0.9922, 0.9922, 0.3686, 0.3490, 0.2157, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
    0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
  };
}
